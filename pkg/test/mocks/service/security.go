// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/security.go

// Package service is a generated GoMock package.
package service

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionsService is a mock of SessionsService interface.
type MockSessionsService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsServiceMockRecorder
}

// MockSessionsServiceMockRecorder is the mock recorder for MockSessionsService.
type MockSessionsServiceMockRecorder struct {
	mock *MockSessionsService
}

// NewMockSessionsService creates a new mock instance.
func NewMockSessionsService(ctrl *gomock.Controller) *MockSessionsService {
	mock := &MockSessionsService{ctrl: ctrl}
	mock.recorder = &MockSessionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionsService) EXPECT() *MockSessionsServiceMockRecorder {
	return m.recorder
}

// IsAuthenticated mocks base method.
func (m *MockSessionsService) IsAuthenticated(rw http.ResponseWriter, r *http.Request) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated", rw, r)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *MockSessionsServiceMockRecorder) IsAuthenticated(rw, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockSessionsService)(nil).IsAuthenticated), rw, r)
}

// Login mocks base method.
func (m *MockSessionsService) Login(rw http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", rw, r)
}

// Login indicates an expected call of Login.
func (mr *MockSessionsServiceMockRecorder) Login(rw, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSessionsService)(nil).Login), rw, r)
}

// Logout mocks base method.
func (m *MockSessionsService) Logout(rw http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", rw, r)
}

// Logout indicates an expected call of Logout.
func (mr *MockSessionsServiceMockRecorder) Logout(rw, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSessionsService)(nil).Logout), rw, r)
}
