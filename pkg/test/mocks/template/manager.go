// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/template/manager.go

// Package template is a generated GoMock package.
package template

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// RenderFile mocks base method.
func (m *MockManager) RenderFile(file string, data interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderFile", file, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderFile indicates an expected call of RenderFile.
func (mr *MockManagerMockRecorder) RenderFile(file, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderFile", reflect.TypeOf((*MockManager)(nil).RenderFile), file, data)
}

// StaticFiles mocks base method.
func (m *MockManager) StaticFiles(file string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaticFiles", file)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StaticFiles indicates an expected call of StaticFiles.
func (mr *MockManagerMockRecorder) StaticFiles(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaticFiles", reflect.TypeOf((*MockManager)(nil).StaticFiles), file)
}
